{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nwindow.initMap = function () {// なにもしない\n}; //onPageLoadの定義\n\n\nfunction onPageLoad(controller_and_actions, callback) {\n  document.addEventListener('turbolinks:load', function () {\n    var conditions = regularize(controller_and_actions);\n\n    if (!conditions) {\n      console.error('[onPageLoad] Unexpected arguments!');\n      return;\n    }\n\n    conditions.forEach(function (a_controller_and_action) {\n      var _a_controller_and_act = a_controller_and_action.split('#'),\n          _a_controller_and_act2 = _slicedToArray(_a_controller_and_act, 2),\n          controller = _a_controller_and_act2[0],\n          action = _a_controller_and_act2[1];\n\n      if (isOnPage(controller, action)) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction regularize(controller_and_actions) {\n  if (typeof controller_and_actions == 'string') {\n    return [controller_and_actions];\n  } else if (Object.prototype.toString.call(controller_and_actions).includes('Array') //controller_and_actions.isArray()\n  ) {\n      return controller_and_actions;\n    } else {\n    return null;\n  }\n}\n\nfunction isOnPage(controller, action) {\n  var selector = \"body[data-controller='\".concat(controller, \"']\");\n\n  if (!!action) {\n    selector += \"[data-action='\".concat(action, \"']\");\n  }\n\n  ;\n  return document.querySelectorAll(selector).length > 0;\n}\n\nfunction getPrefectureName(geoCodeResults) {\n  if (geoCodeResults.length <= 1) {\n    return null;\n  }\n\n  var result = geoCodeResults[0].address_components.filter(function (component) {\n    return component.types.indexOf(\"administrative_area_level_1\") > -1;\n  });\n  return result[0].long_name;\n}\n\nfunction getCountryName(geoCodeResults) {\n  var result = geoCodeResults[0].address_components.filter(function (component) {\n    return component.types.indexOf(\"country\") > -1;\n  });\n  return result[0].long_name;\n} ///googleMapApi共通の定義\n\n\nvar map;\nvar marker;\nvar geocorder;\nvar prefectures = ['北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県', '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県', '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県', '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県', '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'];\nvar tokyo = {\n  lat: 35.681167,\n  lng: 139.767052\n};\nvar locations = {\n  Hokkaido: {\n    lat: 43.06417,\n    lng: 141.34694\n  },\n  Aomori: {\n    lat: 40.814461,\n    lng: 140.739216\n  },\n  Iwate: {\n    lat: 39.705242,\n    lng: 141.153436\n  },\n  Miyagi: {\n    lat: 38.26889,\n    lng: 140.87194\n  },\n  Akita: {\n    lat: 39.713219,\n    lng: 140.100595\n  },\n  Yamagata: {\n    lat: 38.259241,\n    lng: 140.336422\n  },\n  Fukushima: {\n    lat: 37.759840,\n    lng: 140.474085\n  },\n  Ibaragi: {\n    lat: 36.364709,\n    lng: 140.472702\n  },\n  Tochigi: {\n    lat: 36.556332,\n    lng: 139.880485\n  },\n  Gunma: {\n    lat: 36.390499,\n    lng: 139.064527\n  },\n  Saitama: {\n    lat: 35.860151,\n    lng: 139.644560\n  },\n  Chiba: {\n    lat: 35.605114,\n    lng: 140.096384\n  },\n  Tokyo: {\n    lat: 35.68944,\n    lng: 139.69167\n  },\n  Kanagawa: {\n    lat: 35.44778,\n    lng: 139.6425\n  },\n  Niigata: {\n    lat: 37.90222,\n    lng: 139.02361\n  },\n  Toyama: {\n    lat: 36.69528,\n    lng: 137.21139\n  },\n  Ishikawa: {\n    lat: 36.59444,\n    lng: 136.62556\n  },\n  Fukui: {\n    lat: 36.06528,\n    lng: 136.22194\n  },\n  Yamanashi: {\n    lat: 35.66389,\n    lng: 138.56833\n  },\n  Nagano: {\n    lat: 36.65139,\n    lng: 138.18111\n  },\n  Gifu: {\n    lat: 35.39111,\n    lng: 136.72222\n  },\n  Shizuoka: {\n    lat: 34.97694,\n    lng: 138.38306\n  },\n  Aichi: {\n    lat: 35.18028,\n    lng: 136.90667\n  },\n  Mie: {\n    lat: 34.73028,\n    lng: 136.50861\n  },\n  Shiga: {\n    lat: 35.00444,\n    lng: 135.86833\n  },\n  Kyoto: {\n    lat: 35.02139,\n    lng: 135.75556\n  },\n  Osaka: {\n    lat: 34.68639,\n    lng: 135.52\n  },\n  Hyogo: {\n    lat: 34.69139,\n    lng: 135.18306\n  },\n  Nara: {\n    lat: 34.68528,\n    lng: 135.83278\n  },\n  Wakayama: {\n    lat: 34.22611,\n    lng: 135.1675\n  },\n  Tottori: {\n    lat: 35.50361,\n    lng: 134.23833\n  },\n  Shimane: {\n    lat: 35.47222,\n    lng: 133.05056\n  },\n  Okayama: {\n    lat: 34.66167,\n    lng: 133.935\n  },\n  Hiroshima: {\n    lat: 34.39639,\n    lng: 132.45944\n  },\n  Yamaguchi: {\n    lat: 34.18583,\n    lng: 131.47139\n  },\n  Tokushima: {\n    lat: 34.06583,\n    lng: 134.55944\n  },\n  Kagawa: {\n    lat: 34.34028,\n    lng: 134.04333\n  },\n  Ehime: {\n    lat: 33.84167,\n    lng: 132.76611\n  },\n  Kochi: {\n    lat: 33.55972,\n    lng: 133.53111\n  },\n  Fukuoka: {\n    lat: 33.60639,\n    lng: 130.41806\n  },\n  Saga: {\n    lat: 33.24944,\n    lng: 130.29889\n  },\n  Nagasaki: {\n    lat: 32.74472,\n    lng: 129.87361\n  },\n  Kumamoto: {\n    lat: 32.78972,\n    lng: 130.74167\n  },\n  Oita: {\n    lat: 33.23806,\n    lng: 131.6125\n  },\n  Miyazaki: {\n    lat: 31.91111,\n    lng: 131.42389\n  },\n  Kagoshima: {\n    lat: 31.56028,\n    lng: 130.55806\n  },\n  Okinawa: {\n    lat: 26.2125,\n    lng: 127.68111\n  }\n};\n\nfunction initializeForm() {\n  if (isEnabled.checked) {\n    substitute.textContent = 'マップで選択してください';\n    substitute.style.display = 'inline-block';\n    locationSelector.disabled = false;\n    prefectureSelector.hidden = true;\n    lat.readOnly = false;\n    lng.readOnly = false;\n    map.setOptions({\n      zoom: 12,\n      disableDefaultUI: false,\n      scrollwheel: true,\n      gestureHandling: 'auto',\n      clickableIcons: true\n    });\n  } else {\n    substitute.style.display = 'none';\n    locationSelector.disabled = true;\n    locationSelector.options.selectedIndex = 12;\n    prefectureSelector.hidden = false;\n    lat.readOnly = true;\n    lng.readOnly = true;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      center: tokyo,\n      zoom: 12,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false\n    });\n\n    if (marker) {\n      marker.setMap(null);\n    }\n  }\n}\n\nfunction panMapToSelectedLocation(e) {\n  console.log(e.target.options.selectedIndex);\n  var selectedLocation = e.target.options[e.target.options.selectedIndex].value;\n  console.log(locations[selectedLocation]);\n  map.setOptions({\n    center: locations[selectedLocation]\n  });\n} ///\n\n\nonPageLoad('articles#new', function () {\n  console.log('rendering_map...');\n  var target = document.getElementById('mapTarget'); // new edit show board\n\n  var prefectureSelector = document.getElementById('article_prefecture'); //new ediit\n\n  var substitute = document.getElementById('substitute_prefecture'); //new edit\n\n  var lat = document.getElementById('map_lat'); // new edit\n\n  var lng = document.getElementById('map_lng'); // new edit\n\n  var isEnabled = document.getElementById('map_is_enabled'); // new edit\n\n  var locationSelector = document.getElementById('map_location'); // new edit\n\n  map = new google.maps.Map(target, {\n    center: tokyo\n  }); // new\n\n  initializeForm();\n  isEnabled.addEventListener('change', initializeForm());\n  locationSelector.addEventListener('change', panMapToSelectedLocation(e));\n  geocoder = new google.maps.Geocoder(); //new edit\n\n  map.addListener('click', function (e) {\n    //ピンどめの処理 //new edit\n    if (!isEnabled.checked) {\n      return;\n    }\n\n    if (marker) {\n      marker.setMap(null);\n      lat.value = null;\n      lng.value = null;\n    }\n\n    geocoder.geocode({\n      location: e.latLng\n    }, function (results, status) {\n      if (status !== 'OK') {\n        alert('Faild: ' + status + ':国内の陸地を選択してください');\n        return;\n      }\n\n      console.log(results);\n\n      if (getCountryName(results) != '日本') {\n        alert('国内の陸地を選択してください');\n        return;\n      }\n\n      if (getPrefectureName(results) == null) {\n        alert('国内の陸地を選択してください');\n        return;\n      }\n\n      if (results[0]) {\n        marker = new google.maps.Marker({\n          position: e.latLng,\n          map: map,\n          title: '発見場所',\n          animation: google.maps.Animation.DROP\n        });\n        lat.value = e.latLng.lat().toFixed(6);\n        lng.value = e.latLng.lng().toFixed(6);\n      }\n\n      prefectureSelector.options.selectedIndex = prefectures.indexOf(getPrefectureName(results));\n      substitute.textContent = getPrefectureName(results);\n      console.log(getCountryName(results));\n      console.log(getPrefectureName(results));\n    });\n  });\n  prefectureSelector.addEventListener('click', function () {\n    //new edit\n    lat.readOnly = true;\n    lng.readOnly = true;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      // center: tokyo,\n      zoom: 15,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false\n    });\n\n    if (marker) {\n      marker.setMap(null);\n    }\n  });\n});","map":{"version":3,"sources":["/dokotory/app/javascript/packs/google_map.js"],"names":["window","initMap","onPageLoad","controller_and_actions","callback","document","addEventListener","conditions","regularize","console","error","forEach","a_controller_and_action","split","controller","action","isOnPage","Object","prototype","toString","call","includes","selector","querySelectorAll","length","getPrefectureName","geoCodeResults","result","address_components","filter","component","types","indexOf","long_name","getCountryName","map","marker","geocorder","prefectures","tokyo","lat","lng","locations","Hokkaido","Aomori","Iwate","Miyagi","Akita","Yamagata","Fukushima","Ibaragi","Tochigi","Gunma","Saitama","Chiba","Tokyo","Kanagawa","Niigata","Toyama","Ishikawa","Fukui","Yamanashi","Nagano","Gifu","Shizuoka","Aichi","Mie","Shiga","Kyoto","Osaka","Hyogo","Nara","Wakayama","Tottori","Shimane","Okayama","Hiroshima","Yamaguchi","Tokushima","Kagawa","Ehime","Kochi","Fukuoka","Saga","Nagasaki","Kumamoto","Oita","Miyazaki","Kagoshima","Okinawa","initializeForm","isEnabled","checked","substitute","textContent","style","display","locationSelector","disabled","prefectureSelector","hidden","readOnly","setOptions","zoom","disableDefaultUI","scrollwheel","gestureHandling","clickableIcons","options","selectedIndex","value","center","setMap","panMapToSelectedLocation","e","log","target","selectedLocation","getElementById","google","maps","Map","geocoder","Geocoder","addListener","geocode","location","latLng","results","status","alert","Marker","position","title","animation","Animation","DROP","toFixed"],"mappings":"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","sourcesContent":["\nwindow.initMap = function() {\n  // なにもしない\n};\n\n//onPageLoadの定義\n\nfunction onPageLoad(controller_and_actions, callback) {\n  document.addEventListener('turbolinks:load', ()=>{\n    const conditions = regularize(controller_and_actions);\n    if (!conditions) {\n      console.error('[onPageLoad] Unexpected arguments!');\n      return;\n    }\n    conditions.forEach(a_controller_and_action =>{\n      const [controller, action] = a_controller_and_action.split('#');\n      if (isOnPage(controller, action)) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction regularize(controller_and_actions) {\n  if (typeof controller_and_actions == 'string') {\n    return[controller_and_actions];\n  } else if (\n    Object.prototype.toString.call(controller_and_actions).includes('Array')\n    //controller_and_actions.isArray()\n  ) {\n    return controller_and_actions;\n  } else {\n    return null;\n  }\n}\n\nfunction isOnPage(controller, action) {\n  var selector = `body[data-controller='${controller}']`;\n  if (!!action) {\n    selector += `[data-action='${action}']`\n  };\n  return document.querySelectorAll(selector).length > 0;\n}\n\nfunction getPrefectureName(geoCodeResults) {\n  if (geoCodeResults.length <= 1) {\n    return null;\n  }\n  var result = geoCodeResults[0].address_components.filter(component => {\n    return component.types.indexOf(\"administrative_area_level_1\") > -1;\n  });\n  return result[0].long_name;\n}\n\nfunction getCountryName(geoCodeResults) {\n  var result = geoCodeResults[0].address_components.filter(component => {\n    return component.types.indexOf(\"country\") > -1;\n  });\n  return result[0].long_name;\n}\n\n///googleMapApi共通の定義\nvar map;\nvar marker;\nvar geocorder;\nvar prefectures = [\n  '北海道',\n  '青森県',\n  '岩手県',\n  '宮城県',\n  '秋田県',\n  '山形県',\n  '福島県',\n  '茨城県',\n  '栃木県',\n  '群馬県',\n  '埼玉県',\n  '千葉県',\n  '東京都',\n  '神奈川県',\n  '新潟県',\n  '富山県',\n  '石川県',\n  '福井県',\n  '山梨県',\n  '長野県',\n  '岐阜県',\n  '静岡県',\n  '愛知県',\n  '三重県',\n  '滋賀県',\n  '京都府',\n  '大阪府',\n  '兵庫県',\n  '奈良県',\n  '和歌山県',\n  '鳥取県',\n  '島根県',\n  '岡山県',\n  '広島県',\n  '山口県',\n  '徳島県',\n  '香川県',\n  '愛媛県',\n  '高知県',\n  '福岡県',\n  '佐賀県',\n  '長崎県',\n  '熊本県',\n  '大分県',\n  '宮崎県',\n  '鹿児島県',\n  '沖縄県',\n];\n\nvar tokyo = {lat: 35.681167, lng: 139.767052};\nvar locations = {\n  Hokkaido: {lat: 43.06417, lng: 141.34694 },\n  Aomori: {lat: 40.814461, lng: 140.739216 },\n  Iwate: {lat: 39.705242, lng: 141.153436 },\n  Miyagi: {lat: 38.26889, lng: 140.87194 },\n  Akita: {lat: 39.713219, lng: 140.100595 },\n  Yamagata: {lat: 38.259241, lng: 140.336422 },\n  Fukushima: {lat: 37.759840, lng: 140.474085 },\n  Ibaragi: {lat: 36.364709, lng: 140.472702 },\n  Tochigi: {lat: 36.556332, lng: 139.880485 },\n  Gunma: {lat: 36.390499, lng: 139.064527 },\n  Saitama: {lat: 35.860151, lng: 139.644560 },\n  Chiba: {lat: 35.605114, lng: 140.096384 },\n  Tokyo: {lat: 35.68944, lng: 139.69167 },\n  Kanagawa: {lat: 35.44778, lng: 139.6425 },\n  Niigata: {lat: 37.90222, lng: 139.02361 },\n  Toyama: {lat: 36.69528, lng: 137.21139 },\n  Ishikawa: {lat: 36.59444, lng: 136.62556 },\n  Fukui: {lat: 36.06528, lng: 136.22194 },\n  Yamanashi: {lat: 35.66389, lng: 138.56833},\n  Nagano: {lat: 36.65139, lng: 138.18111 },\n  Gifu: {lat: 35.39111, lng: 136.72222 },\n  Shizuoka: {lat: 34.97694, lng: 138.38306 },\n  Aichi: {lat: 35.18028, lng: 136.90667 },\n  Mie: {lat: 34.73028, lng: 136.50861 },\n  Shiga: {lat: 35.00444, lng: 135.86833 },\n  Kyoto: {lat: 35.02139, lng: 135.75556 },\n  Osaka: {lat: 34.68639, lng: 135.52 },\n  Hyogo: {lat: 34.69139, lng: 135.18306 },\n  Nara: {lat: 34.68528, lng: 135.83278 },\n  Wakayama: {lat: 34.22611, lng: 135.1675 },\n  Tottori: {lat: 35.50361, lng: 134.23833 },\n  Shimane: {lat: 35.47222, lng: 133.05056 },\n  Okayama: {lat: 34.66167, lng: 133.935 },\n  Hiroshima: {lat: 34.39639, lng: 132.45944 },\n  Yamaguchi: {lat: 34.18583, lng: 131.47139 },\n  Tokushima: {lat: 34.06583, lng: 134.55944 },\n  Kagawa: {lat: 34.34028, lng: 134.04333 },\n  Ehime: {lat: 33.84167, lng: 132.76611 },\n  Kochi: {lat: 33.55972, lng: 133.53111 },\n  Fukuoka: {lat: 33.60639, lng: 130.41806 },\n  Saga: {lat: 33.24944, lng: 130.29889 },\n  Nagasaki: {lat: 32.74472, lng: 129.87361 },\n  Kumamoto: {lat: 32.78972, lng: 130.74167 },\n  Oita: {lat: 33.23806, lng: 131.6125 },\n  Miyazaki: {lat: 31.91111, lng: 131.42389 },\n  Kagoshima: {lat: 31.56028, lng: 130.55806 },\n  Okinawa: {lat: 26.2125, lng: 127.68111 },\n};\n\nfunction initializeForm() {\n  if (isEnabled.checked) {\n    substitute.textContent = 'マップで選択してください';\n    substitute.style.display = 'inline-block'\n    locationSelector.disabled = false;\n    prefectureSelector.hidden = true;\n    lat.readOnly = false;\n    lng.readOnly = false;\n    map.setOptions({\n      zoom: 12,\n      disableDefaultUI: false,\n      scrollwheel: true,\n      gestureHandling: 'auto',\n      clickableIcons: true,\n    });\n  } else {\n    substitute.style.display = 'none'\n    locationSelector.disabled = true;\n    locationSelector.options.selectedIndex = 12;\n    prefectureSelector.hidden = false;\n    lat.readOnly = true;\n    lng.readOnly = true;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      center: tokyo,\n      zoom: 12,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false,\n    });\n    if (marker) {\n      marker.setMap(null);\n    }\n  }\n}\n\nfunction panMapToSelectedLocation(e) {\n    console.log(e.target.options.selectedIndex);\n    var selectedLocation = e.target.options[e.target.options.selectedIndex].value;\n    console.log(locations[selectedLocation]);\n    map.setOptions({\n      center: locations[selectedLocation]\n    });\n}\n\n///\n\nonPageLoad('articles#new', ()=>{\n  console.log('rendering_map...');\n  var target = document.getElementById('mapTarget');// new edit show board\n  var prefectureSelector = document.getElementById('article_prefecture');//new ediit\n  var substitute = document.getElementById('substitute_prefecture');//new edit\n  var lat = document.getElementById('map_lat'); // new edit\n  var lng = document.getElementById('map_lng'); // new edit\n  var isEnabled = document.getElementById('map_is_enabled');// new edit\n  var locationSelector = document.getElementById('map_location');// new edit\n\n  map = new google.maps.Map(target, {\n    center: tokyo\n  });// new\n\n  initializeForm();\n  isEnabled.addEventListener('change',initializeForm());\n  locationSelector.addEventListener('change', panMapToSelectedLocation(e));\n  geocoder = new google.maps.Geocoder() //new edit\n  map.addListener('click', e =>{ //ピンどめの処理 //new edit\n    if (!isEnabled.checked) {\n      return;\n    }\n    if (marker) {\n      marker.setMap(null);\n      lat.value = null;\n      lng.value = null;\n    }\n    geocoder.geocode(\n      {location: e.latLng},\n      (results, status) => {\n        if (status !== 'OK') {\n          alert('Faild: ' + status + ':国内の陸地を選択してください');\n          return;\n        }\n        console.log(results);\n        if (getCountryName(results) != '日本') {\n          alert('国内の陸地を選択してください');\n          return;\n        }\n        if (getPrefectureName(results) == null) {\n          alert('国内の陸地を選択してください');\n          return;\n        }\n        if (results[0]) {\n          marker = new google.maps.Marker({\n            position: e.latLng,\n            map: map,\n            title: '発見場所',\n            animation: google.maps.Animation.DROP,\n          });\n          lat.value = e.latLng.lat().toFixed(6);\n          lng.value = e.latLng.lng().toFixed(6);\n        }\n        prefectureSelector.options.selectedIndex = prefectures.indexOf(getPrefectureName(results));\n        substitute.textContent = getPrefectureName(results);\n\n        console.log(getCountryName(results));\n        console.log(getPrefectureName(results));\n      })\n  });\n\n  prefectureSelector.addEventListener('click',()=>{ //new edit\n    lat.readOnly = true;\n    lng.readOnly = true;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      // center: tokyo,\n      zoom: 15,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false,\n    });\n    if (marker) {\n      marker.setMap(null);\n    }\n  });\n\n});\n"]},"metadata":{},"sourceType":"module"}