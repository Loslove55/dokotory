{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nwindow.initMap = function () {// なにもしない\n}; //onPageLoadの定義\n\n\nfunction onPageLoad(controller_and_actions, callback) {\n  document.addEventListener('turbolinks:load', function () {\n    var conditions = regularize(controller_and_actions);\n\n    if (!conditions) {\n      console.error('[onPageLoad] Unexpected arguments!');\n      return;\n    }\n\n    conditions.forEach(function (a_controller_and_action) {\n      var _a_controller_and_act = a_controller_and_action.split('#'),\n          _a_controller_and_act2 = _slicedToArray(_a_controller_and_act, 2),\n          controller = _a_controller_and_act2[0],\n          action = _a_controller_and_act2[1];\n\n      if (isOnPage(controller, action)) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction regularize(controller_and_actions) {\n  if (typeof controller_and_actions == 'string') {\n    return [controller_and_actions];\n  } else if (Object.prototype.toString.call(controller_and_actions).includes('Array') //controller_and_actions.isArray()\n  ) {\n      return controller_and_actions;\n    } else {\n    return null;\n  }\n}\n\nfunction isOnPage(controller, action) {\n  var selector = \"body[data-controller='\".concat(controller, \"']\");\n\n  if (!!action) {\n    selector += \"[data-action='\".concat(action, \"']\");\n  }\n\n  ;\n  return document.querySelectorAll(selector).length > 0;\n}\n\nfunction getPrefectureName(geoCodeResults) {\n  if (geoCodeResults.length <= 1) {\n    return null;\n  }\n\n  var result = geoCodeResults[0].address_components.filter(function (component) {\n    return component.types.indexOf(\"administrative_area_level_1\") > -1;\n  });\n  return result[0].long_name;\n}\n\nfunction getCountryName(geoCodeResults) {\n  var result = geoCodeResults[0].address_components.filter(function (component) {\n    return component.types.indexOf(\"country\") > -1;\n  });\n  return result[0].long_name;\n} //Mapの定義\n\n\nonPageLoad('home#top', function () {// p = document.createElement('p');\n  // p.textContent = 'onPageLoad';\n  // document.body.appendChild(p);\n});\nonPageLoad('articles#new', function () {\n  console.log('rendering_map...');\n  var target = document.getElementById('mapTarget');\n  var selectPrefecture = document.getElementById('article_prefecture');\n  var map;\n  var marker;\n  var geocorder;\n  var prefectures = ['北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県', '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県', '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県', '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県', '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'];\n  var tokyo = {\n    lat: 35.681167,\n    lng: 139.767052\n  };\n  var lat = document.getElementById('map_lat');\n  var lng = document.getElementById('map_lng');\n  var isEnabled = document.getElementById('map_is_enabled');\n  map = new google.maps.Map(target, {\n    center: tokyo,\n    zoom: 15\n  });\n\n  if (isEnabled.checked) {\n    //\bmapフォームの有効無効切り替え(デフォルト)\n    lat.readOnly = false;\n    lng.readOnly = false;\n    selectPrefecture.readOnly = true;\n    map.setOptions({\n      center: tokyo,\n      zoom: 15,\n      disableDefaultUI: false,\n      scrollwheel: true,\n      gestureHandling: 'auto',\n      clickableIcons: true\n    });\n  } else {\n    lat.readOnly = true;\n    lng.readOnly = true;\n    selectPrefecture.readOnly = false;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      center: tokyo,\n      zoom: 15,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false\n    });\n  }\n\n  isEnabled.addEventListener('change', function () {\n    //\bmapフォームの有効無効切り替え(選択した時)\n    if (isEnabled.checked) {\n      lat.readOnly = false;\n      lng.readOnly = false;\n      map.setOptions({\n        center: tokyo,\n        zoom: 15,\n        disableDefaultUI: false,\n        scrollwheel: true,\n        gestureHandling: 'auto',\n        clickableIcons: true\n      });\n    } else {\n      lat.readOnly = true;\n      lng.readOnly = true;\n      lat.value = null;\n      lng.value = null;\n      map.setOptions({\n        center: tokyo,\n        zoom: 15,\n        disableDefaultUI: true,\n        scrollwheel: false,\n        gestureHandling: 'none',\n        clickableIcons: false\n      });\n\n      if (marker) {\n        marker.setMap(null);\n      }\n    }\n  });\n  geocoder = new google.maps.Geocoder();\n  map.addListener('click', function (e) {\n    //ピンどめの処理\n    if (!isEnabled.checked) {\n      return;\n    }\n\n    if (marker) {\n      marker.setMap(null);\n      lat.value = null;\n      lng.value = null;\n    }\n\n    geocoder.geocode({\n      location: e.latLng\n    }, function (results, status) {\n      if (status !== 'OK') {\n        alert('Faild: ' + status + ':国内の陸地を選択してください');\n        return;\n      }\n\n      console.log(results);\n\n      if (getCountryName(results) != '日本') {\n        alert('国内の陸地を選択してください');\n        return;\n      }\n\n      if (getPrefectureName(results) == null) {\n        alert('国内の陸地を選択してください');\n        return;\n      }\n\n      if (results[0]) {\n        marker = new google.maps.Marker({\n          position: e.latLng,\n          map: map,\n          title: '発見場所',\n          animation: google.maps.Animation.DROP\n        });\n        lat.value = e.latLng.lat().toFixed(6);\n        lng.value = e.latLng.lng().toFixed(6);\n      }\n\n      selectPrefecture.options.selectedIndex = prefectures.indexOf(getPrefectureName(results));\n      console.log(getCountryName(results));\n      console.log(getPrefectureName(results));\n    });\n  }); // map.addListener('click', e =>{ //ピンどめの処理\n  //   if (!isEnabled.checked) {\n  //     return;\n  //   }\n  //   if (marker) {\n  //     marker.setMap(null);\n  //   }\n  //   marker = new google.maps.Marker({\n  //     position: e.latLng,\n  //     map: map,\n  //     title: '発見場所',\n  //     animation: google.maps.Animation.DROP,\n  //   });\n  //   lat.value = e.latLng.lat().toFixed(6);\n  //   lng.value = e.latLng.lng().toFixed(6);\n  // });\n});","map":{"version":3,"sources":["/dokotory/app/javascript/packs/google_map.js"],"names":["window","initMap","onPageLoad","controller_and_actions","callback","document","addEventListener","conditions","regularize","console","error","forEach","a_controller_and_action","split","controller","action","isOnPage","Object","prototype","toString","call","includes","selector","querySelectorAll","length","getPrefectureName","geoCodeResults","result","address_components","filter","component","types","indexOf","long_name","getCountryName","log","target","getElementById","selectPrefecture","map","marker","geocorder","prefectures","tokyo","lat","lng","isEnabled","google","maps","Map","center","zoom","checked","readOnly","setOptions","disableDefaultUI","scrollwheel","gestureHandling","clickableIcons","value","setMap","geocoder","Geocoder","addListener","e","geocode","location","latLng","results","status","alert","Marker","position","title","animation","Animation","DROP","toFixed","options","selectedIndex"],"mappings":"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","sourcesContent":["\nwindow.initMap = function() {\n  // なにもしない\n};\n\n//onPageLoadの定義\n\nfunction onPageLoad(controller_and_actions, callback) {\n  document.addEventListener('turbolinks:load', ()=>{\n    const conditions = regularize(controller_and_actions);\n    if (!conditions) {\n      console.error('[onPageLoad] Unexpected arguments!');\n      return;\n    }\n    conditions.forEach(a_controller_and_action =>{\n      const [controller, action] = a_controller_and_action.split('#');\n      if (isOnPage(controller, action)) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction regularize(controller_and_actions) {\n  if (typeof controller_and_actions == 'string') {\n    return[controller_and_actions];\n  } else if (\n    Object.prototype.toString.call(controller_and_actions).includes('Array')\n    //controller_and_actions.isArray()\n  ) {\n    return controller_and_actions;\n  } else {\n    return null;\n  }\n}\n\nfunction isOnPage(controller, action) {\n  var selector = `body[data-controller='${controller}']`;\n  if (!!action) {\n    selector += `[data-action='${action}']`\n  };\n  return document.querySelectorAll(selector).length > 0;\n}\n\nfunction getPrefectureName(geoCodeResults) {\n  if (geoCodeResults.length <= 1) {\n    return null;\n  }\n  var result = geoCodeResults[0].address_components.filter(component => {\n    return component.types.indexOf(\"administrative_area_level_1\") > -1;\n  });\n  return result[0].long_name;\n}\n\nfunction getCountryName(geoCodeResults) {\n  var result = geoCodeResults[0].address_components.filter(component => {\n    return component.types.indexOf(\"country\") > -1;\n  });\n  return result[0].long_name;\n}\n\n//Mapの定義\n\nonPageLoad('home#top',()=>{\n  // p = document.createElement('p');\n  // p.textContent = 'onPageLoad';\n  // document.body.appendChild(p);\n});\n\nonPageLoad('articles#new', ()=>{\n\n  console.log('rendering_map...');\n  var target = document.getElementById('mapTarget');\n  var selectPrefecture = document.getElementById('article_prefecture');\n  var map;\n  var marker;\n  var geocorder;\n  var prefectures = [\n    '北海道',\n    '青森県',\n    '岩手県',\n    '宮城県',\n    '秋田県',\n    '山形県',\n    '福島県',\n    '茨城県',\n    '栃木県',\n    '群馬県',\n    '埼玉県',\n    '千葉県',\n    '東京都',\n    '神奈川県',\n    '新潟県',\n    '富山県',\n    '石川県',\n    '福井県',\n    '山梨県',\n    '長野県',\n    '岐阜県',\n    '静岡県',\n    '愛知県',\n    '三重県',\n    '滋賀県',\n    '京都府',\n    '大阪府',\n    '兵庫県',\n    '奈良県',\n    '和歌山県',\n    '鳥取県',\n    '島根県',\n    '岡山県',\n    '広島県',\n    '山口県',\n    '徳島県',\n    '香川県',\n    '愛媛県',\n    '高知県',\n    '福岡県',\n    '佐賀県',\n    '長崎県',\n    '熊本県',\n    '大分県',\n    '宮崎県',\n    '鹿児島県',\n    '沖縄県',\n  ];\n\n  var tokyo = {lat: 35.681167, lng: 139.767052};\n\n  var lat = document.getElementById('map_lat');\n  var lng = document.getElementById('map_lng');\n\n  var isEnabled = document.getElementById('map_is_enabled');\n\n  map = new google.maps.Map(target, {\n    center: tokyo,\n    zoom: 15\n  });\n\n  if (isEnabled.checked) { //\bmapフォームの有効無効切り替え(デフォルト)\n    lat.readOnly = false;\n    lng.readOnly = false;\n    selectPrefecture.readOnly = true;\n    map.setOptions({\n      center: tokyo,\n      zoom: 15,\n      disableDefaultUI: false,\n      scrollwheel: true,\n      gestureHandling: 'auto',\n      clickableIcons: true,\n    });\n  } else {\n    lat.readOnly = true;\n    lng.readOnly = true;\n    selectPrefecture.readOnly = false;\n    lat.value = null;\n    lng.value = null;\n    map.setOptions({\n      center: tokyo,\n      zoom: 15,\n      disableDefaultUI: true,\n      scrollwheel: false,\n      gestureHandling: 'none',\n      clickableIcons: false,\n    });\n  }\n\n  isEnabled.addEventListener('change',()=>{//\bmapフォームの有効無効切り替え(選択した時)\n    if (isEnabled.checked) {\n      lat.readOnly = false;\n      lng.readOnly = false;\n      map.setOptions({\n        center: tokyo,\n        zoom: 15,\n        disableDefaultUI: false,\n        scrollwheel: true,\n        gestureHandling: 'auto',\n        clickableIcons: true,\n      });\n    } else {\n      lat.readOnly = true;\n      lng.readOnly = true;\n      lat.value = null;\n      lng.value = null;\n      map.setOptions({\n        center: tokyo,\n        zoom: 15,\n        disableDefaultUI: true,\n        scrollwheel: false,\n        gestureHandling: 'none',\n        clickableIcons: false,\n      });\n      if (marker) {\n        marker.setMap(null);\n      }\n    }\n  });\n\n\n  geocoder = new google.maps.Geocoder()\n\n  map.addListener('click', e =>{ //ピンどめの処理\n    if (!isEnabled.checked) {\n      return;\n    }\n    if (marker) {\n      marker.setMap(null);\n      lat.value = null;\n      lng.value = null;\n    }\n    geocoder.geocode(\n      {location: e.latLng},\n      (results, status) => {\n        if (status !== 'OK') {\n          alert('Faild: ' + status + ':国内の陸地を選択してください');\n          return;\n        }\n        console.log(results);\n        if (getCountryName(results) != '日本') {\n          alert('国内の陸地を選択してください');\n          return;\n        }\n        if (getPrefectureName(results) == null) {\n          alert('国内の陸地を選択してください');\n          return;\n        }\n        if (results[0]) {\n          marker = new google.maps.Marker({\n            position: e.latLng,\n            map: map,\n            title: '発見場所',\n            animation: google.maps.Animation.DROP,\n          });\n          lat.value = e.latLng.lat().toFixed(6);\n          lng.value = e.latLng.lng().toFixed(6);\n        }\n\n        selectPrefecture.options.selectedIndex = prefectures.indexOf(getPrefectureName(results));\n\n        console.log(getCountryName(results));\n        console.log(getPrefectureName(results));\n      })\n  });\n  // map.addListener('click', e =>{ //ピンどめの処理\n  //   if (!isEnabled.checked) {\n  //     return;\n  //   }\n  //   if (marker) {\n  //     marker.setMap(null);\n  //   }\n  //   marker = new google.maps.Marker({\n  //     position: e.latLng,\n  //     map: map,\n  //     title: '発見場所',\n  //     animation: google.maps.Animation.DROP,\n  //   });\n  //   lat.value = e.latLng.lat().toFixed(6);\n  //   lng.value = e.latLng.lng().toFixed(6);\n  // });\n});\n"]},"metadata":{},"sourceType":"module"}